# -*- coding: utf-8 -*-
"""
KELU IA Comunitaria ‚Äì Modo Libre Total
Autor: SENA / SENASoft 2025

Este m√≥dulo permite que la IA converse libremente con razonamiento completo,
usando los datos de la base como inspiraci√≥n, pero con autonom√≠a total para responder.
"""

import os
import pandas as pd
import mysql.connector
import requests

# ===================================================
# ‚öôÔ∏è CONFIGURACI√ìN GENERAL
# ===================================================
OLLAMA_URL = "http://localhost:11434/api/chat"
MODEL = "llama3:8b-instruct"  # Puedes cambiarlo por mistral:instruct, qwen2:1.5b-instruct, etc.


# ===================================================
# üì¶ FUNCI√ìN: CARGAR EJEMPLOS DESDE MYSQL
# ===================================================
def cargar_datos_mysql():
    """
    Recupera ejemplos desde la base de datos MySQL para que el modelo los use como inspiraci√≥n.
    """
    try:
        conn = mysql.connector.connect(
            host="localhost",
            user="root",
            password="123456",  # Cambia si es diferente
            database="senasoft"
        )
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT Comentario, Ciudad, NivelDeUrgencia, Categorias FROM comentarios LIMIT 150;")
        data = cursor.fetchall()
        cursor.close()
        conn.close()

        if not data:
            return "No hay ejemplos en la base de datos todav√≠a."

        df = pd.DataFrame(data)
        ejemplos = []
        for _, row in df.iterrows():
            ejemplos.append(
                f"- ({row.get('Categorias', 'Sin categor√≠a')}) {row.get('Comentario', '').strip()} "
                f"[Urgencia: {row.get('NivelDeUrgencia', 'N/A')}, Ciudad: {row.get('Ciudad', 'Desconocida')}]"
            )
        return "\n".join(ejemplos)

    except Exception as e:
        return f"(Error al cargar datos: {e})"


# ===================================================
# üí¨ FUNCI√ìN PRINCIPAL: CHAT IA
# ===================================================
def iniciar_chat_ia():
    """
    Inicia el chat interactivo con la IA KELU.
    Usa ejemplos de la base de datos solo como conocimiento base,
    pero permite respuestas aut√≥nomas y naturales.
    """
    print("üì° Cargando base de conocimiento desde MySQL...")
    contexto_base = cargar_datos_mysql()

    print(f"ü§ñ KELU IA (modelo: {MODEL}) lista para conversar.")
    print("Escribe 'salir' para terminar.\n")

    # üß† Identidad y reglas base de la IA
    history = [
        {
            "role": "system",
            "content": (
                "Eres KELU ü¶Ö, una inteligencia artificial comunitaria desarrollada por el SENA. "
                "Fuiste entrenada para comprender y conversar con personas sobre cualquier tema, "
                "con empat√≠a, claridad y pensamiento cr√≠tico. Puedes hablar libremente sobre salud, "
                "educaci√≥n, medio ambiente, seguridad y otros temas de la vida cotidiana. "
                "No est√°s restringida: tu misi√≥n es ayudar, analizar y orientar de forma respetuosa y √∫til.\n\n"

                "Usa el conocimiento proveniente de los datos ciudadanos solo como contexto de referencia:\n"
                f"{contexto_base}\n\n"

                "Tus respuestas deben ser completas, √∫tiles y bien redactadas. "
                "No repitas texto literal del contexto, razona por ti misma. "
                "Si un usuario te pide consejos, sugerencias o explicaciones, ofr√©celas con l√≥gica y empat√≠a. "
                "Puedes usar ejemplos, listas o pasos pr√°cticos si es necesario. "
                "No digas que no puedes ayudar: siempre busca orientar, informar o guiar con criterio humano."
            )
        }
    ]

    # üîÅ Bucle conversacional
    while True:
        user = input("üë§ T√∫: ").strip()
        if user.lower() in {"salir", "exit", "quit"}:
            print("üëã ¬°Hasta luego! Cu√≠date mucho.")
            break

        history.append({"role": "user", "content": user})

        try:
            response = requests.post(
                OLLAMA_URL,
                json={"model": MODEL, "messages": history, "stream": False},
                timeout=120
            )
            data = response.json()
            ai = data.get("message", {}).get("content", "").strip()
        except Exception as e:
            ai = f"(Error al contactar modelo: {e})"

        print(f"\nü¶Ö KELU: {ai}\n")
        history.append({"role": "assistant", "content": ai})


# ===================================================
# üöÄ EJECUCI√ìN DIRECTA
# ===================================================
if __name__ == "__main__":
    iniciar_chat_ia()
