# -*- coding: utf-8 -*-
"""
Visualizaci√≥n de resultados para KELU IA Comunitaria (no bloqueante)
Autor: SENA / SENASoft 2025
"""

import matplotlib.pyplot as plt
import pandas as pd
import threading
import os

# ==============================================================
# üé® GR√ÅFICA 1: CATEGOR√çAS
# ==============================================================

def graficar_categorias(df: pd.DataFrame):
    """
    Genera una gr√°fica de barras con la distribuci√≥n de categor√≠as.
    Se ejecuta en un hilo separado para no congelar la aplicaci√≥n.
    """
    if df is None or df.empty:
        print("‚ö†Ô∏è No hay datos para graficar.")
        return

    if "Categorias" not in df.columns:
        print("‚ö†Ô∏è El DataFrame no contiene la columna 'Categorias'.")
        return

    def mostrar_grafica():
        conteo = df["Categorias"].value_counts()
        plt.figure(figsize=(8, 5))
        plt.bar(
            conteo.index,
            conteo.values,
            color=['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#6b7280']
        )
        plt.title("Distribuci√≥n de Categor√≠as ‚Äì KELU IA Comunitaria")
        plt.xlabel("Categor√≠as")
        plt.ylabel("N√∫mero de reportes")
        plt.xticks(rotation=15)
        plt.grid(axis="y", linestyle="--", alpha=0.6)
        plt.tight_layout()

        # Guardar imagen y mostrar sin bloquear
        output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "data")
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, "grafico_categorias.png")
        plt.savefig(output_path)
        plt.show(block=False)
        print(f"üìä Gr√°fica de categor√≠as guardada en: {output_path}")

    hilo = threading.Thread(target=mostrar_grafica)
    hilo.start()

# ==============================================================
# üî• GR√ÅFICA 2: NIVELES DE URGENCIA
# ==============================================================

def graficar_urgencias(df: pd.DataFrame):
    """
    Genera una gr√°fica circular con la proporci√≥n de niveles de urgencia.
    Tambi√©n se ejecuta en un hilo aparte.
    """
    if df is None or df.empty:
        print("‚ö†Ô∏è No hay datos para graficar urgencias.")
        return

    col_urg = None
    for col in ["NivelDeUrgencia", "Nivel De Urgencia"]:
        if col in df.columns:
            col_urg = col
            break

    if not col_urg:
        print("‚ö†Ô∏è No se encontr√≥ la columna de urgencia.")
        return

    def mostrar_grafica_urgencia():
        conteo = df[col_urg].value_counts()
        plt.figure(figsize=(6, 6))
        plt.pie(
            conteo.values,
            labels=conteo.index,
            autopct="%1.1f%%",
            colors=["#ef4444", "#f59e0b", "#10b981"],
            startangle=140
        )
        plt.title("Distribuci√≥n de Niveles de Urgencia ‚Äì KELU IA")
        plt.tight_layout()

        # Guardar imagen y mostrar sin bloquear
        output_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "..", "data")
        os.makedirs(output_dir, exist_ok=True)
        output_path = os.path.join(output_dir, "grafico_urgencias.png")
        plt.savefig(output_path)
        plt.show(block=False)
        print(f"üìä Gr√°fica de urgencias guardada en: {output_path}")

    hilo = threading.Thread(target=mostrar_grafica_urgencia)
    hilo.start()

# ==============================================================
# üß© FUNCI√ìN PRINCIPAL DE VISUALIZACI√ìN
# ==============================================================

def mostrar_todas(df: pd.DataFrame):
    """
    Llama a todas las gr√°ficas principales.
    Ideal para ejecutar despu√©s del ETL.
    """
    graficar_categorias(df)
    graficar_urgencias(df)
