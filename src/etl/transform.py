# -*- coding: utf-8 -*-
"""
M√≥dulo de Transformaci√≥n de Datos ‚Äì KELU IA Comunitaria
Autor: SENA / SENASoft 2025

Procesos:
‚úÖ Limpieza y normalizaci√≥n de datos.
‚úÖ Clasificaci√≥n autom√°tica (Educaci√≥n, Salud, Medio Ambiente, Seguridad, Otro).
‚úÖ Generaci√≥n de explicaci√≥n (columna 'Razon').
‚úÖ Eliminaci√≥n de duplicados, conservando diferencias de urgencia.
"""

import pandas as pd

def transformar_datos(df: pd.DataFrame) -> pd.DataFrame:
    print("üßπ Iniciando transformaci√≥n de datos reales...")

    # ====================================================
    # 1Ô∏è‚É£ Validaci√≥n inicial
    # ====================================================
    if df is None or df.empty:
        print("‚ö†Ô∏è DataFrame vac√≠o. No hay datos para transformar.")
        return pd.DataFrame()

    # ====================================================
    # 2Ô∏è‚É£ Normalizaci√≥n de nombres de columnas
    # ====================================================
    df.columns = [col.strip().title() for col in df.columns]

    # ====================================================
    # 3Ô∏è‚É£ Verificaci√≥n de columnas m√≠nimas necesarias
    # ====================================================
    columnas_requeridas = ["Comentario", "Ciudad", "Nivel De Urgencia", "Categor√≠a Del Problema"]
    for col in columnas_requeridas:
        if col not in df.columns:
            print(f"‚ö†Ô∏è Columna faltante: {col}. Se crear√° vac√≠a.")
            df[col] = ""

    # ====================================================
    # 4Ô∏è‚É£ Limpieza b√°sica de texto y valores faltantes
    # ====================================================
    df = df.dropna(subset=["Comentario"])
    df["Comentario"] = df["Comentario"].astype(str).str.lower().str.strip()
    df["Ciudad"] = df["Ciudad"].fillna("Desconocida").astype(str).str.lower().str.strip()
    df["Nivel De Urgencia"] = df["Nivel De Urgencia"].fillna("Media").astype(str).str.strip()

    # ====================================================
    # 5Ô∏è‚É£ Longitud del comentario (m√©trica de an√°lisis)
    # ====================================================
    df["LongitudComentario"] = df["Comentario"].apply(len)

    # ====================================================
    # 6Ô∏è‚É£ Clasificaci√≥n autom√°tica + explicaci√≥n
    # ====================================================
    def clasificar_y_explicar(texto, categoria_existente):
        texto_l = texto.lower()
        razon = ""

        # Palabras clave para detecci√≥n
        if any(pal in texto_l for pal in ["escuela", "profesor", "colegio", "educaci√≥n", "estudiante", "clases"]):
            categoria_detectada = "Educaci√≥n"
            razon = "Palabras clave detectadas: escuela, profesor, clases"
        elif any(pal in texto_l for pal in ["hospital", "salud", "m√©dico", "vacuna", "enfermo", "eps", "cita"]):
            categoria_detectada = "Salud"
            razon = "Palabras clave detectadas: salud, hospital, m√©dico"
        elif any(pal in texto_l for pal in ["basura", "r√≠o", "contaminaci√≥n", "√°rbol", "limpieza", "reciclaje", "ambiente"]):
            categoria_detectada = "Medio Ambiente"
            razon = "Palabras clave detectadas: basura, r√≠o, contaminaci√≥n"
        elif any(pal in texto_l for pal in ["robo", "violencia", "seguridad", "polic√≠a", "arma", "asalto"]):
            categoria_detectada = "Seguridad"
            razon = "Palabras clave detectadas: robo, polic√≠a, seguridad"
        else:
            categoria_detectada = "Otro"
            razon = "Sin coincidencias claras ‚Äì clasificado como 'Otro'"

        # Comparar con categor√≠a original del dataset
        if categoria_existente and categoria_existente.strip().lower() not in ["", "nan", "otro"]:
            categoria_existente = categoria_existente.title()
            if categoria_existente == categoria_detectada:
                razon = f"Confirmado por texto: {razon}"
            else:
                razon = f"Texto indica '{categoria_detectada.lower()}', pero dataset ten√≠a '{categoria_existente.lower()}'"
                # Mantiene la categor√≠a original para no sobreescribir
                categoria_detectada = categoria_existente

        return (categoria_detectada, razon)

    # Aplicar clasificaci√≥n
    df[["Categorias", "Razon"]] = df.apply(
        lambda row: pd.Series(
            clasificar_y_explicar(row["Comentario"], row.get("Categor√≠a Del Problema", ""))
        ),
        axis=1
    )

    # ====================================================
    # 7Ô∏è‚É£ Eliminaci√≥n de duplicados inteligentes
    # ====================================================
    before = len(df)
    df = df.drop_duplicates(subset=["Comentario", "Ciudad", "Categorias"], keep="first")
    after = len(df)
    print(f"üßπ Registros duplicados eliminados: {before - after}")

    # ====================================================
    # 8Ô∏è‚É£ Renombrar columnas para consistencia con MySQL
    # ====================================================
    df = df.rename(columns={"Nivel De Urgencia": "NivelDeUrgencia"})

    # ====================================================
    # 9Ô∏è‚É£ Resumen final
    # ====================================================
    print("‚úÖ Datos transformados correctamente.")
    print(f"üìä Total registros finales: {len(df)}")
    print("üß© Columnas finales:", list(df.columns))

    return df
